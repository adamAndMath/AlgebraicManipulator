import base.Add;
import base.Sub;
import base.Mult;
import base.Div;

assume Prod(Func<List<Integer,Complex>,Complex> f, Integer a, Integer b)
    prod<i>(eval(f,i),a,b)=rec<i,r>(mult(r,eval(f,sub(add(i,a),1))),1,add(sub(b,a),1));

work Identity(Func<Integer,Complex> f, Integer a) {
    let 2 prod<i>(eval(f,i),a,sub(a,1));
    substitute Prod[0->1](f,a,sub(a,1)):1;
    rename i->j:1;
    toeval(j1=j:[1,1,0,0],r1=r:[0]):1,0;
    substitute Sub.Commute2[2->0](sub(a,1),1,a):1,2;
    substitute Sub.Add1[2->0](a,1):1,2,0;
    substitute Sub.Inverse[0->1](a):1,2;
    substitute Rec.Identity[0->1](func<j1, r1>(mult(r1,eval(f,sub(add(j1,a),1)))),1):1;
} result {
    prod<i>(eval(f,i),a,sub(a,1))=1
}

work Rec(Func<Integer,Complex> f, Integer a, Integer b) {
    let 2 prod<i>(eval(f,i),a,b);
    substitute Prod[0->1](f,a,b):1;
    toeval(i1=i:[1,1,0,0],r1=r:[0]):1,0;
    rename i->j:1;
    substitute Rec.Rec[0->1](func<i1,r1>(mult(r1,eval(f,sub(add(i1,a),1)))),1,add(sub(b,a),1)):1;
    rename j->i:1,2;
    fromeval:1,2,0;
    fromeval:1;
    substitute Sub.Commute2[2->0](b,1,a):1,1,1,0,0;
    substitute Sub.Add1[2->0](add(b,1),a):1,1,1,0;
    substitute Sub.Add1[1->0](b,1):1,1,1;
    substitute Sub.Add1[1->2](sub(b,a),1):1,0,2;
    substitute Sub.Commute[0->1](b,a,1):1,0,2,0;
    substitute Prod[1->0](f,a,sub(b,1)):1,0;
} result {
    prod<i>(eval(f,i),a,b)=mult(prod<i>(eval(f,i),a,sub(b,1)),eval(f,b))
}

work Single(Func<Integer,Complex> f, Integer a) {
    let 2 prod<i>(eval(f,i),a,a);
    substitute Rec[0->1](f,a,a):1;
    substitute Identity[0->1](f,a):1,0;
    substitute Mult.Identity[2->0](eval(f,a)):1;
} result {
     prod<i>(eval(f,i),a,a)=eval(f,a)
 }

induction Rec2(Func<Integer,Complex> f, Integer a, Integer b) {
    base b=a {
        let 2 prod<i>(eval(f,i),a,a);
        substitute Rec[0->1](f,a,a):1;
        substitute Identity[0->1](f,a):1,0;
        substitute Mult.Commute[0->1](1,eval(f,a)):1;
        substitute Identity[1->0](f,add(a,1)):1,1;
        substitute Sub.Add1[1->0](a,1):1,1,2;
    } b+ {
        substitute Sub.Add1[0->1](b,1):0,2;
        substitute Sub.Add1[0->1](b,1):1,1,2;
        call x mult(x,eval(f,add(b,1)));
        substitute Mult.Associate[0->1](eval(f,a),prod<i>(eval(f,i),add(a,1),sub(add(b,1),1)),eval(f,add(b,1))):1;
        substitute Rec[1->0](f,a,add(b,1)):0;
        substitute Rec[1->0](f,add(a,1),add(b,1)):1,1;
    } b- {
        substitute Rec[0->1](f,a,b):0;
        substitute Rec[0->1](f,add(a,1),b):1,1;
        substitute Mult.Associate[1->0](eval(f,a),prod<i>(eval(f,i),add(a,1),sub(b,1)),eval(f,b)):1;
        call x div(x,eval(f,b));
        substitute Div.Mult1[1->0](prod<i>(eval(f,i),a,sub(b,1)),eval(f,b)):0;
        substitute Div.Mult1[1->0](mult(eval(f,a),prod<i>(eval(f,i),add(a,1),sub(b,1))),eval(f,b)):1;
    }
} result {
    prod<i>(eval(f,i),a,b)=mult(eval(f,a),prod<i>(eval(f,i),add(a,1),b))
}

work IndexShift(Func<Integer,Complex> f, Integer a, Integer b, Integer c) {
    let 2 prod<i>(eval(f,i),a,b);
    substitute Prod[0->1](f,a,b):1;
    substitute Sub.Add1[0->1](b,c):1,2,0,0;
    substitute Sub.Commute[1->2](add(b,c),a,c):1,2,0;
    substitute Sub.Add1[0->1](sub(add(i,a),1),c):1,0,1,1;
    toeval(i1=add(sub(add(i,a),1),c):[1,0]):1,0,1;
    substitute Sub.Commute2[2->0](add(i,a),c,1):1,0,1,1;
    substitute Add.Associate[0->1](i,a,c):1,0,1,1,0;
    substitute Prod[1->0](func<i1>(eval(f, sub(i1,c))),add(a,c),add(b,c)):1;
    fromeval:1,0;
} result {
    prod<i>(eval(f,i),a,b)=prod<i>(eval(f,sub(i,c)),add(a,c),add(b,c))
}

induction Reverse(Func<Integer,Complex> f, Integer a, Integer b) {
    base a=0,b=0 {
        let 2 prod<i>(eval(f,i),0,0);
        substitute Rec[0->1](f,0,0):1;
        substitute Identity[0->1](f,0):1,0;
        substitute Sub.Inverse[1->0](0):1,1,1;
        substitute Sub.Inverse[1->0](0):1,1,1,1;
        toeval(i1=sub(0,0):[1,1]):1,1;
        substitute Identity[1->0](func<i1>(eval(f,sub(0,i1))),sub(0,0)):1,0;
        substitute Rec[1->0](func<i1>(eval(f,sub(0,i1))),sub(0,0),sub(0,0)):1;
        fromeval:1,0;
    } a+ {
        substitute Rec2[0->1](f,a,b):0;
        substitute Mult.Commute[0->1](eval(f,a),prod<i>(eval(f,i),add(a,1),b)):0;
        toeval(i1=i:[1,1]):1,0;
        substitute Rec[0->1](func<i1>(eval(f,sub(0,i1))),sub(0,b),sub(0,a)):1;
        fromeval:1,0,0;
        fromeval:1,1;
        substitute Sub.Negate[1->0](a):1,1,1;
        substitute Sub.Commute[0->2](0,a,1):1,0,2;
        call x div(x,eval(f,a));
        substitute Div.Mult1[1->0](prod<i>(eval(f,i),add(a,1),b),eval(f,a)):0;
        substitute Div.Mult1[1->0](prod<i>(eval(f,sub(0,i)),sub(0,b),sub(0,add(a,1))),eval(f,a)):1;
    } a- {
        substitute Sub.Add1[0->2](a,1):0,1;
        substitute Sub.Add1[0->2](a,1):1,2,1;
        substitute Sub.Commute[2->0](0,sub(a,1),1):1,2;
        call x mult(x,eval(f,sub(a,1)));
        substitute Mult.Commute[0->1](prod<i>(eval(f,i),add(sub(a,1),1),b),eval(f,sub(a,1))):0;
        substitute Rec2[1->0](f,sub(a,1),b):0;
        substitute Sub.Negate[0->1](sub(a,1)):1,1,1;
        toeval(i1=i:[1,1]):1,0,0;
        toeval(i1=sub(0,sub(a,1)):[1,1]):1,1;
        substitute Rec[1->0](func<i1>(eval(f,sub(0,i1))),sub(0,b),sub(0,sub(a,1))):1;
        fromeval:1,0;
    } b+ {
        substitute Sub.Add1[0->1](b,1):0,2;
        substitute Sub.Add1[0->1](b,1):1,1,1;
        substitute Sub.Commute2[3->2](0,1,add(b,1)):1,1;
        call x mult(x,eval(f,add(b,1)));
        substitute Mult.Commute[0->1](prod<i>(eval(f,sub(0,i)),add(sub(0,add(b,1)),1),sub(0,a)),eval(f,add(b,1))):1;
        substitute Rec[1->0](f,a,add(b,1)):0;
        substitute Sub.Negate[0->1](add(b,1)):1,0,1;
        toeval(i1=i:[1,1]):1,1,0;
        toeval(i1=sub(0,add(b,1)):[1,1]):1,0;
        substitute Rec2[1->0](func<i1>(eval(f,sub(0,i1))),sub(0,add(b,1)),sub(0,a)):1;
        fromeval:1,0;
    } b- {
        substitute Rec[0->1](f,a,b):0;
        toeval(i1=i:[1,1]):1,0;
        substitute Rec2[0->1](func<i1>(eval(f,sub(0,i1))),sub(0,b),sub(0,a)):1;
        fromeval:1,0;
        fromeval:1,1,0;
        substitute Mult.Commute[0->1](eval(f,sub(0,sub(0,b))),prod<i>(eval(f,sub(0,i)),add(sub(0,b),1),sub(0,a))):1;
        substitute Sub.Negate[1->0](b):1,1,1;
        substitute Sub.Commute2[2->3](0,1,b):1,0,1;
        call x div(x,eval(f,b));
        substitute Div.Mult1[1->0](prod<i>(eval(f,i),a,sub(b,1)),eval(f,b)):0;
        substitute Div.Mult1[1->0](prod<i>(eval(f,sub(0,i)),sub(0,sub(b,1)),sub(0,a)),eval(f,b)):1;
    }
} result {
    prod<i>(eval(f,i),a,b)=prod<i>(eval(f,sub(0,i)),sub(0,b),sub(0,a))
}

induction RangeSplit(Func<Integer,Complex> f, Integer a, Integer b, Integer c) {
    base c=b {
        let 2 prod<i>(eval(f,i),a,b);
        substitute Mult.Identity[0->1](prod<i>(eval(f,i),a,b)):1;
        substitute Identity[1->0](f,add(b,1)):1,1;
        substitute Sub.Add1[1->0](b,1):1,1,2;
    } c+ {
        call x mult(x,eval(f,add(c,1)));
        substitute Mult.Associate[0->1](prod<i>(eval(f,i),a,b),prod<i>(eval(f,i),add(b,1),c),eval(f,add(c,1))):1;
        substitute Sub.Add1[0->1](c,1):0,0,2;
        substitute Sub.Add1[0->1](c,1):1,1,0,2;
        substitute Rec[1->0](f,a,add(c,1)):0;
        substitute Rec[1->0](f,add(b,1),add(c,1)):1,1;
    } c- {
        substitute Rec[0->1](f,a,c):0;
        substitute Rec[0->1](f,add(b,1),c):1,1;
        substitute Mult.Associate[1->0](prod<i>(eval(f,i),a,b),prod<i>(eval(f,i),add(b,1),sub(c,1)),eval(f,c)):1;
        call x div(x,eval(f,c));
        substitute Div.Mult1[1->0](prod<i>(eval(f,i),a,sub(c,1)),eval(f,c)):0;
        substitute Div.Mult1[1->0](mult(prod<i>(eval(f,i),a,b),prod<i>(eval(f,i),add(b,1),sub(c,1))),eval(f,c)):1;
    }
} result {
    prod<i>(eval(f,i),a,c)=mult(prod<i>(eval(f,i),a,b),prod<i>(eval(f,i),add(b,1),c))
}

induction Distribute(Func<Integer,Complex> f, Func<Integer,Complex> g, Integer a, Integer b) {
    base b=a {
        let 2 mult(eval(f,a),eval(g,a));
        toeval(i1=a:[0,1|1,1]):0;
        substitute Single[1->0](func<i1>(mult(eval(f,i1),eval(g,i1))),a):0;
        fromeval:0,0;
        substitute Single[1->0](f,a):1,0;
        substitute Single[1->0](g,a):1,1;
    } b+ {
        call x mult(x,mult(eval(f,add(b,1)),eval(g,add(b,1))));

        substitute Mult.Associate[1->0](mult(prod<i>(eval(f,i),a,b),prod<i>(eval(g,i),a,b)),eval(f,add(b,1)),eval(g,add(b,1))):1;
        substitute Mult.Associate[0->1](prod<i>(eval(f,i),a,b),prod<i>(eval(g,i),a,b),eval(f,add(b,1))):1,0;
        substitute Mult.Commute[0->1](prod<i>(eval(g,i),a,b),eval(f,add(b,1))):1,0,1;
        substitute Mult.Associate[1->0](prod<i>(eval(f,i),a,b),eval(f,add(b,1)),prod<i>(eval(g,i),a,b)):1,0;
        substitute Mult.Associate[0->1](mult(prod<i>(eval(f,i),a,b),eval(f,add(b,1))),prod<i>(eval(g,i),a,b),eval(g,add(b,1))):1;

        toeval(i1=i:[0,1|1,1]):0,0,0;
        toeval(i1=add(b,1):[0,1|1,1]):0,1;

        substitute Sub.Add1[0->1](b,1):0,0,2;
        substitute Sub.Add1[0->1](b,1):1,0,0,2;
        substitute Sub.Add1[0->1](b,1):1,1,0,2;

        substitute Rec[1->0](func<i1>(mult(eval(f,i1),eval(g,i1))),a,add(b,1)):0;
        substitute Rec[1->0](f,a,add(b,1)):1,0;
        substitute Rec[1->0](g,a,add(b,1)):1,1;

        fromeval:0,0;
    } b- {
        toeval(i1=i:[0,1|1,1]):0,0;

        substitute Rec[0->1](func<i1>(mult(eval(f,i1),eval(g,i1))),a,b):0;
        substitute Rec[0->1](f,a,b):1,0;
        substitute Rec[0->1](g,a,b):1,1;

        fromeval:0,0,0;
        fromeval:0,1;

        substitute Mult.Associate[1->0](mult(prod<i>(eval(f,i),a,sub(b,1)),eval(f,b)),prod<i>(eval(g,i),a,sub(b,1)),eval(g,b)):1;
        substitute Mult.Associate[0->1](prod<i>(eval(f,i),a,sub(b,1)),eval(f,b),prod<i>(eval(g,i),a,sub(b,1))):1,0;
        substitute Mult.Commute[1->0](prod<i>(eval(g,i),a,sub(b,1)),eval(f,b)):1,0,1;
        substitute Mult.Associate[1->0](prod<i>(eval(f,i),a,sub(b,1)),prod<i>(eval(g,i),a,sub(b,1)),eval(f,b)):1,0;
        substitute Mult.Associate[0->1](mult(prod<i>(eval(f,i),a,sub(b,1)),prod<i>(eval(g,i),a,sub(b,1))),eval(f,b),eval(g,b)):1;

        call x div(x,mult(eval(f,b),eval(g,b)));

        substitute Div.Mult1[1->0](prod<i>(mult(eval(f,i),eval(g,i)),a,sub(b,1)),mult(eval(f,b),eval(g,b))):0;
        substitute Div.Mult1[1->0](mult(prod<i>(eval(f,i),a,sub(b,1)),prod<i>(eval(g,i),a,sub(b,1))),mult(eval(f,b),eval(g,b))):1;
    }
} result {
    prod<i>(mult(eval(f,i),eval(g,i)),a,b)=mult(prod<i>(eval(f,i),a,b),prod<i>(eval(g,i),a,b))
}